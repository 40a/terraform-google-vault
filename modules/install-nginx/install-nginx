#!/bin/bash
# This script can be used to install nginx. This script has been tested with the following operating systems:
#
# 1. Ubuntu 16.04

set -e

readonly DEFAULT_INSTALL_PATH="/opt/nginx"
readonly DEFAULT_NGINX_USER="nginx"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SYSTEM_BIN_DIR="/usr/local/bin"

readonly SUPERVISOR_DIR="/etc/supervisor"
readonly SUPERVISOR_CONF_DIR="$SUPERVISOR_DIR/conf.d"

readonly SCRIPT_NAME="$(basename "$0")"

function print_usage {
  echo
  echo "Usage: install-nginx [OPTIONS]"
  echo
  echo "This script can be used to install nginx. This script has been tested with Ubuntu 16.04."
  echo
  echo "Options:"
  echo
  echo -e "  --path\t\tThe path where nginx should be installed. Optional. Default: $DEFAULT_INSTALL_PATH."
  echo -e "  --user\t\tThe user who will own the nginx install directories. Optional. Default: $DEFAULT_NGINX_USER."
  echo -e "  --signing-key\tThe local path to the PGP key used to sign nginx debian packages. This enables us to verify"
  echo -e "               \tpackage integrity. Originally downloaded from http://nginx.org/keys/nginx_signing.key."
  echo
  echo "Example:"
  echo
  echo "  install-nginx"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function assert_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log_error "The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

# Return the Ubunu codename such as "precise", "trusty", or "xenial"
function get_ubuntu_codename {
  bash <(cat /etc/os-release; echo 'echo ${UBUNTU_CODENAME/*, /}')
}

function user_exists {
  local readonly username="$1"

  log_info "Checking if user $username exists"
  id "$username" >/dev/null 2>&1
}

function create_linux_user {
  local readonly username="$1"

  if $(user_exists "$username"); then
    log_info "User $username already exists. Will not create again."
  else
    log_info "Creating user named $username"
    sudo useradd "$username"
  fi
}

function create_nginx_install_paths {
  local readonly path="$1"
  local readonly username="$2"

  log_info "Creating install dirs for nginx at $path"
  sudo mkdir -p "$path"
  sudo mkdir -p "$path/bin"
  sudo mkdir -p "$path/config"
  sudo mkdir -p "$path/log"

  log_info "Changing ownership of $path to $username"
  sudo chown -R "$username:$username" "$path"
}

function download_nginx_binary {
  local readonly signing_key="$1"
  local readonly path="$2"
  local readonly dest_path="$3"

  log_info "Downloading nginx package"
  sudo apt-key add "$signing_key"
  sudo echo "deb http://nginx.org/packages/ubuntu/ $(get_ubuntu_codename) nginx" >> /etc/apt/sources.list
  sudo echo "deb-src http://nginx.org/packages/ubuntu/ $(get_ubuntu_codename) nginx" >> /etc/apt/sources.list
  sudo apt-get update
  sudo apt-get download nginx

  log_info "Extracting nginx binary from package"
  sudo mkdir -p /tmp/nginx-deb
  sudo dpkg-deb -R *.deb /tmp/nginx-deb
  sudo mv /tmp/nginx/usr/sbin/nginx "$dest_path"
}

function install_nginx {
  local readonly nginx_bin_src_path="$1"
  local readonly path="$2"
  local readonly username="$3"

  local readonly bin_dir="$path/bin"
  local readonly nginx_bin_dest_path="$bin_dir/nginx"
  local readonly run_nginx_dest_path="$bin_dir/run-nginx"

  log_info "Moving nginx binary from $nginx_bin_src_path to $nginx_bin_dest_path"
  sudo mv "$nginx_bin_src_path" "$nginx_bin_dest_path"
  sudo chown "$username:$username" "$nginx_bin_dest_path"
  sudo chmod u+x "$nginx_bin_dest_path"

  log_info "Copying nginx run script to $run_nginx_dest_path"
  sudo cp "$SCRIPT_DIR/../run-nginx/run-nginx" "$run_nginx_dest_path"
  sudo chown "$username:$username" "$run_nginx_dest_path"
  sudo chmod a+x "$run_nginx_dest_path"
}

function install {
  local signing_key=""
  local path="$DEFAULT_INSTALL_PATH"
  local user="$DEFAULT_NGINX_USER"

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --signing-key)
        signing_key="$2"
        shift
        ;;
      --path)
        path="$2"
        shift
        ;;
      --user)
        user="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--signing-key" "$signing_key"
  assert_not_empty "--path" "$path"
  assert_not_empty "--user" "$user"

  assert_is_installed "dpkg-deb"

  log_info "Starting nginx install"

  create_linux_user "$user"
  create_nginx_install_paths "$path" "$user"
  download_nginx_binary "$signing_key" "$path" "/tmp/nginx/bin/nginx"
  install_nginx "/tmp/nginx/bin/nginx" "$path" "$user"

  log_info "Nginx install complete!"
}

install "$@"